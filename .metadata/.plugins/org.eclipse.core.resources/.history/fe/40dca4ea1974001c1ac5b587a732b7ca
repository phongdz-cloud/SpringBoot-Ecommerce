package com.shopme.address;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.List;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase.Replace;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
import org.springframework.test.annotation.Rollback;

import com.shopme.common.entity.Address;
import com.shopme.common.entity.Country;
import com.shopme.common.entity.Customer;

@DataJpaTest
@AutoConfigureTestDatabase(replace = Replace.NONE)
@Rollback(false)
public class AddressRepositoryTests {
	@Autowired
	private AddressRepository repo;
	@Autowired
	private TestEntityManager entityManager;

	@Test
	public void testAddNew() {
		Integer countryId = 242;
		Integer customerId = 1;
		Country country = entityManager.find(Country.class, countryId);
		Customer customer = entityManager.find(Customer.class, customerId);
		Address address = new Address();
		address.setCountry(country);
		address.setCustomer(customer);
		address.setFirstName("Khanh");
		address.setLastName("Linh");
		address.setPhoneNumber("0375489103");
		address.setCity("Binh Dinh");
		address.setState("Phan Thiet");
		address.setAddressLine1("Phan Thiet");
		address.setPostalCode("83");
		Address savedAdress = repo.save(address);
		assertThat(savedAdress).isNotNull();
	}
	
	@Test
	public void testFindByCustomer() {
		Integer customerId = 1;
		Customer customer = entityManager.find(Customer.class, customerId);
		List<Address> findByCustomer = repo.findByCustomer(customer);
		
		assertThat(findByCustomer.size()).isEqualTo(2);
		findByCustomer.forEach(System.out::println);
	}
	
	@Test
	public void testFindByIdAndCustomer() {
		Integer customerId = 1;
		Integer addressId = 1;
		Customer customer = entityManager.find(Customer.class, customerId);
		Address findByIdAndCustomer = repo.findByIdAndCustomer(addressId, customer.getId());
		assertThat(findByIdAndCustomer).isNotNull();
		System.out.println(findByIdAndCustomer);
	}
	
	@Test
	public void testUpdate() {
		Integer addressId = 1;
		Address address = entityManager.find(Address.class, addressId);
		address.setPostalCode("80");
		Address savedAddress = repo.save(address);
		assertThat(savedAddress.getPostalCode()).isEqualTo("80");
	}
}
